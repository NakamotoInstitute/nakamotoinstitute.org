{
  "emails": [
    {
      "Subject": "Re: Bitcoin v0.1 released",
      "From": "Satoshi Nakamoto",
      "Date": "2009-01-25T08:34:34-0800",
      "Text": "\n\nHal Finney wrote:\n> > * Spammer botnets could burn through pay-per-send email filters\n> >   trivially\n> If POW tokens do become useful, and especially if they become money,\n> machines will no longer sit idle. Users will expect their computers to\n> be earning them money (assuming the reward is greater than the cost to\n> operate). A computer whose earnings are being stolen by a botnet will\n> be more noticeable to its owner than is the case today, hence we might\n> expect that in that world, users will work harder to maintain their\n> computers and clean them of botnet infestations.\n\nAnother factor that would mitigate spam if POW tokens have value:\nthere would be a profit motive for people to set up massive\nquantities of fake e-mail accounts to harvest POW tokens from\nspam.  They'd essentially be reverse-spamming the spammers with\nautomated mailboxes that collect their POW and don't read the\nmessage.  The ratio of fake mailboxes to real people could become\ntoo high for spam to be cost effective. \n\nThe process has the potential to establish the POW token's value\nin the first place, since spammers that don't have a botnet could\nbuy tokens from harvesters.  While the buying back would\ntemporarily let more spam through, it would only hasten the\nself-defeating cycle leading to too many harvesters exploiting the\nspammers.\n\nInterestingly, one of the e-gold systems already has a form of\nspam called \"dusting\".  Spammers send a tiny amount of gold dust\nin order to put a spam message in the transaction's comment field.\n If the system let users configure the minimum payment they're\nwilling to receive, or at least the minimum that can have a\nmessage with it, users could set how much they're willing to get\npaid to receive spam.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to majord...@metzdowd.com\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin v0.1 released",
      "From": "Satoshi Nakamoto",
      "Date": "2009-01-17T06:58:44-0800",
      "Text": "\n\n> Dustin D. Trammell wrote:\n> > Satoshi Nakamoto wrote:\n> > You know, I think there were a lot more people interested in the 90's,\n> > but after more than a decade of failed Trusted Third Party based systems\n> > (Digicash, etc), they see it as a lost cause. I hope they can make the\n> > distinction that this is the first time I know of that we're trying a\n> > non-trust-based system.\n>\n> Yea, that was the primary feature that caught my eye. The real trick\n> will be to get people to actually value the BitCoins so that they become\n> currency.\n \nI would be surprised if 10 years from now we're not using\nelectronic currency in some way, now that we know a way to do it\nthat won't inevitably get dumbed down when the trusted third party\ngets cold feet.\n\nIt could get started in a narrow niche like reward points,\ndonation tokens, currency for a game or micropayments for adult\nsites.  Initially it can be used in proof-of-work applications\nfor services that could almost be free but not quite.\n\nIt can already be used for pay-to-send e-mail.  The send dialog is\nresizeable and you can enter as long of a message as you like.\nIt's sent directly when it connects.  The recipient doubleclicks\non the transaction to see the full message.  If someone famous is\ngetting more e-mail than they can read, but would still like to\nhave a way for fans to contact them, they could set up Bitcoin and\ngive out the IP address on their website.  \"Send X bitcoins to my\npriority hotline at this IP and I'll read the message personally.\"\n\nSubscription sites that need some extra proof-of-work for their\nfree trial so it doesn't cannibalize subscriptions could charge\nbitcoins for the trial.\n\nIt might make sense just to get some in case it catches on.  If\nenough people think the same way, that becomes a self fulfilling\nprophecy.  Once it gets bootstrapped, there are so many\napplications if you could effortlessly pay a few cents to a\nwebsite as easily as dropping coins in a vending machine.  \n\nSatoshi Nakamoto\nhttp:\/\/www.bitcoin.org\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to majord...@metzdowd.com\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Bitcoin v0.1 released",
      "From": "Satoshi Nakamoto",
      "Date": "2009-01-09T17:05:49-0800",
      "Text": "\n\nAnnouncing the first release of Bitcoin, a new electronic cash\nsystem that uses a peer-to-peer network to prevent double-spending.\nIt's completely decentralized with no server or central authority.\n\nSee bitcoin.org for screenshots.\n\nDownload link:\nhttp:\/\/downloads.sourceforge.net\/bitcoin\/bitcoin-0.1.0.rar\n\nWindows only for now.  Open source C++ code is included.\n\n- Unpack the files into a directory\n- Run BITCOIN.EXE\n- It automatically connects to other nodes\n\nIf you can keep a node running that accepts incoming connections,\nyou'll really be helping the network a lot.  Port 8333 on your\nfirewall needs to be open to receive incoming connections.\n\nThe software is still alpha and experimental.  There's no guarantee\nthe system's state won't have to be restarted at some point if it\nbecomes necessary, although I've done everything I can to build in\nextensibility and versioning.\n\nYou can get coins by getting someone to send you some, or turn on\nOptions->Generate Coins to run a node and generate blocks.  I made\nthe proof-of-work difficulty ridiculously easy to start with, so\nfor a little while in the beginning a typical PC will be able to\ngenerate coins in just a few hours.  It'll get a lot harder when\ncompetition makes the automatic adjustment drive up the difficulty.\nGenerated coins must wait 120 blocks to mature before they can be\nspent.\n\nThere are two ways to send money.  If the recipient is online, you\ncan enter their IP address and it will connect, get a new public\nkey and send the transaction with comments.  If the recipient is\nnot online, it is possible to send to their Bitcoin address, which\nis a hash of their public key that they give you.  They'll receive\nthe transaction the next time they connect and get the block it's\nin.  This method has the disadvantage that no comment information\nis sent, and a bit of privacy may be lost if the address is used\nmultiple times, but it is a useful alternative if both users can't\nbe online at the same time or the recipient can't receive incoming\nconnections.\n\nTotal circulation will be 21,000,000 coins.  It'll be distributed\nto network nodes when they make blocks, with the amount cut in half\nevery 4 years.\n\nfirst 4 years: 10,500,000 coins\nnext 4 years: 5,250,000 coins\nnext 4 years: 2,625,000 coins\nnext 4 years: 1,312,500 coins\netc...\n\nWhen that runs out, the system can support transaction fees if\nneeded.  It's based on open market competition, and there will\nprobably always be nodes willing to process transactions for free.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to majord...@metzdowd.com\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-17T13:33:04-0800",
      "Text": "\n\nJames A. Donald wrote:\n> > Fortunately, it's only necessary to keep a\n> > pending-transaction pool for the current best branch.\n> \n> This requires that we know, that is to say an honest\n> well behaved peer whose communications and data storage\n> is working well knows, what the current best branch is -\n\nI mean a node only needs the pending-tx pool for the best branch it\nhas.  The branch that it currently thinks is the best branch.\nThat's the branch it'll be trying to make a block out of, which is\nall it needs the pool for.\n\n\n> > Broadcasts will probably be almost completely\n> > reliable.\n> \n> Rather than assuming that each message arrives at least\n> once, we have to make a mechanism such that the\n> information arrives even though conveyed by messages\n> that frequently fail to arrive.\n\nI think I've got the peer networking broadcast mechanism covered.  \n\nEach node sends its neighbours an inventory list of hashes of the\nnew blocks and transactions it has.  The neighbours request the\nitems they don't have yet.  If the item never comes through after a\ntimeout, they request it from another neighbour that had it.  Since\nall or most of the neighbours should eventually have each item,\neven if the coms get fumbled up with one, they can get it from any\nof the others, trying one at a time.\n\nThe inventory-request-data scheme introduces a little latency, but\nit ultimately helps speed more by keeping extra data blocks off the\ntransmit queues and conserving bandwidth.\n\n\n> You have an outline\n> and proposal for such a design, which is a big step\n> forward, but the devil is in the little details.\n\nI believe I've worked through all those little details over the\nlast year and a half while coding it, and there were a lot of them.\nThe functional details are not covered in the paper, but the\nsourcecode is coming soon.  I sent you the main files.\n(available by request at the moment, full release soon)\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-17T09:06:02-0800",
      "Text": "\n\nRay Dillinger wrote:\n> One way to do this would be\n> to have the person recieving the coin generate an asymmetric\n> key pair, and then have half of it published with the\n> transaction. In order to spend the coin later, s\/he must\n> demonstrate posession of the other half of the asymmetric\n> key pair, probably by using it to sign the key provided by\n> the new seller.\n\nRight, it's ECC digital signatures.  A new key pair is used for every\ntransaction.\n\nIt's not pseudonymous in the sense of nyms identifying people, but it\nis at least a little pseudonymous in that the next action on a coin\ncan be identified as being from the owner of that coin.\n\n\n> Mmmm. I don't know if I'm comfortable with that. You're saying\n> there's no effort to identify and exclude nodes that don't\n> cooperate? I suspect this will lead to trouble and possible DOS\n> attacks.\n\nThere is no reliance on identifying anyone.  As you've said, it's\nfutile and can be trivially defeated with sock puppets.\n\nThe credential that establishes someone as real is the ability to\nsupply CPU power. \n\n\n> Until.... until what? How does anybody know when a transaction\n> has become irrevocable? Is \"a few\" blocks three? Thirty? A\n> hundred? Does it depend on the number of nodes? Is it logarithmic\n> or linear in number of nodes?\n\nSection 11 calculates the worst case under attack.  Typically, 5 or\n10 blocks is enough for that.  If you're selling something that\ndoesn't merit a network-scale attack to steal it, in practice you\ncould cut it closer.\n\n\n> But in the absence of identity, there's no downside to them\n> if spends become invalid, if they've already received the\n> goods they double-spent for (access to website, download,\n> whatever). The merchants are left holding the bag with\n> \"invalid\" coins, unless they wait that magical \"few blocks\"\n> (and how can they know how many?) before treating the spender\n> as having paid.\n>\n> The consumers won't do this if they spend their coin and it takes\n> an hour to clear before they can do what they spent their coin on.\n> The merchants won't do it if there's no way to charge back a\n> customer when they find the that their coin is invalid because\n> the customer has doublespent.\n\nThis is a version 2 problem that I believe can be solved fairly\nsatisfactorily for most applications.\n\nThe race is to spread your transaction on the network first.  Think 6\ndegrees of freedom -- it spreads exponentially.  It would only take\nsomething like 2 minutes for a transaction to spread widely enough\nthat a competitor starting late would have little chance of grabbing\nvery many nodes before the first one is overtaking the whole network.\n During those 2 minutes, the merchant's nodes can be watching for a\ndouble-spent transaction.  The double-spender would not be able to\nblast his alternate transaction out to the world without the merchant\ngetting it, so he has to wait before starting.\n\nIf the real transaction reaches 90% and the double-spent tx reaches\n10%, the double-spender only gets a 10% chance of not paying, and 90%\nchance his money gets spent.  For almost any type of goods, that's\nnot going to be worth it for the scammer.\n\nInformation based goods like access to website or downloads are\nnon-fencible.  Nobody is going to be able to make a living off\nstealing access to websites or downloads.  They can go to the file\nsharing networks to steal that.  Most instant-access products aren't\ngoing to have a huge incentive to steal. \n\nIf a merchant actually has a problem with theft, they can make the\ncustomer wait 2 minutes, or wait for something in e-mail, which many\nalready do.  If they really want to optimize, and it's a large\ndownload, they could cancel the download in the middle if the\ntransaction comes back double-spent.  If it's website access,\ntypically it wouldn't be a big deal to let the customer have access\nfor 5 minutes and then cut off access if it's rejected.  Many such\nsites have a free trial anyway.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-17T09:04:47-0800",
      "Text": "\n\nI'll try and hurry up and release the sourcecode as soon as possible to serve \nas a reference to help clear up all these implementation questions.\n\n\nRay Dillinger (Bear) wrote:\n> When a coin is spent, the buyer and seller digitally sign a (blinded)\n> transaction record.\n\nOnly the buyer signs, and there's no blinding. \n\n\n> If someone double spends, then the transaction record \n> can be unblinded revealing the identity of the cheater. \n\nIdentities are not used, and there's no reliance on recourse.  It's all \nprevention.\n\n\n> This is done via a fairly standard cut-and-choose \n> algorithm where the buyer responds to several challenges\n> with secret shares\n\nNo challenges or secret shares.  A basic transaction is just what you see in \nthe figure in section 2.  A signature (of the buyer) satisfying the public key \nof the previous transaction, and a new public key (of the seller) that must be \nsatisfied to spend it the next time.\n\n\n> They may also receive chains as long as the one they're trying to\n> extend while they work, in which the last few \"links\" are links\n> that are *not* in common with the chain on which they're working.\n> These they ignore. \n\nRight, if it's equal in length, ties are broken by keeping the earliest one \nreceived.\n\n\n> If it contains a double spend, then they create a \"transaction\" \n> which is a proof of double spending, add it to their pool A, \n> broadcast it, and continue work.\n\nThere's no need for reporting of \"proof of double spending\" like that.  If the \nsame chain contains both spends, then the block is invalid and rejected.  \n\nSame if a block didn't have enough proof-of-work.  That block is invalid and \nrejected.  There's no need to circulate a report about it.  Every node could \nsee that and reject it before relaying it.\n\nIf there are two competing chains, each containing a different version of the \nsame transaction, with one trying to give money to one person and the other \ntrying to give the same money to someone else, resolving which of the spends is \nvalid is what the whole proof-of-work chain is about.\n\nWe're not \"on the lookout\" for double spends to sound the alarm and catch the \ncheater.  We merely adjudicate which one of the spends is valid.  Receivers of \ntransactions must wait a few blocks to make sure that resolution has had time \nto complete.  Would be cheaters can try and simultaneously double-spend all \nthey want, and all they accomplish is that within a few blocks, one of the \nspends becomes valid and the others become invalid.  Any later double-spends \nare immediately rejected once there's already a spend in the main chain.  \n\nEven if an earlier spend wasn't in the chain yet, if it was already in all the \nnodes' pools, then the second spend would be turned away by all those nodes \nthat already have the first spend.\n\n\n> If the new chain is accepted, then they give up on adding their\n> current link, dump all the transactions from pool L back into pool\n> A (along with transactions they've received or created since\n> starting work), eliminate from pool A those transaction records\n> which are already part of a link in the new chain, and start work\n> again trying to extend the new chain.\n\nRight.  They also refresh whenever a new transaction comes in, so L pretty much \ncontains everything in A all the time.\n\n\n> CPU-intensive digital signature algorithm to \n> sign the chain including the new block L. \n\nIt's a Hashcash style SHA-256 proof-of-work (partial pre-image of zero), not a \nsignature.  \n\n\n> Is there a mechanism to make sure that the \"chain\" does not consist\n> solely of links added by just the 3 or 4 fastest nodes? 'Cause a\n> broadcast transaction record could easily miss those 3 or 4 nodes\n> and if it does, and those nodes continue to dominate the chain, the\n> transaction might never get added.\n\nIf you're thinking of it as a CPU-intensive digital signing, then you may be \nthinking of a race to finish a long operation first and the fastest always \nwinning.\n\nThe proof-of-work is a Hashcash style SHA-256 collision finding.  It's a \nmemoryless process where you do millions of hashes a second, with a small \nchance of finding one each time.  The 3 or 4 fastest nodes' dominance would \nonly be proportional to their share of the total CPU power.  Anyone's chance of \nfinding a solution at any time is proportional to their CPU power.\n\nThere will be transaction fees, so nodes will have an incentive to receive and \ninclude all the transactions they can.  Nodes will eventually be compensated by \ntransaction fees alone when the total coins created hits the pre-determined \nceiling.\n\n\n> Also, the work requirement for adding a link to the chain should\n> vary (again exponentially) with the number of links added to that\n> chain in the previous week, causing the rate of coin generation\n> (and therefore inflation) to be strictly controlled.\n\nRight.\n\n\n> You need coin aggregation for this to scale. There needs to be\n> a \"provable\" transaction where someone retires ten single coins\n> and creates a new coin with denomination ten, etc. \n\nEvery transaction is one of these.  Section 9, Combining and Splitting Value.  \n\n\nSatoshi Nakamoto\n\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-14T14:29:22-0800",
      "Text": "\n\nHal Finney wrote:\n> I think it is necessary that nodes keep a separate \n> pending-transaction list associated with each candidate chain. \n> ... One might also ask ... how many candidate chains must \n> a given node keep track of at one time, on average?\n\nFortunately, it's only necessary to keep a pending-transaction pool for the \ncurrent best branch.  When a new block arrives for the best branch, \nConnectBlock removes the block's transactions from the pending-tx pool.  If a \ndifferent branch becomes longer, it calls DisconnectBlock on the main branch \ndown to the fork, returning the block transactions to the pending-tx pool, and \ncalls ConnectBlock on the new branch, sopping back up any transactions that \nwere in both branches.  It's expected that reorgs like this would be rare and \nshallow.\n\nWith this optimisation, candidate branches are not really any burden.  They \njust sit on the disk and don't require attention unless they ever become the \nmain chain.\n\n\n> Or as James raised earlier, if the network broadcast \n> is reliable but depends on a potentially slow flooding \n> algorithm, how does that impact performance?\n\nBroadcasts will probably be almost completely reliable.  TCP transmissions are \nrarely ever dropped these days, and the broadcast protocol has a retry \nmechanism to get the data from other nodes after a while.  If broadcasts turn \nout to be slower in practice than expected, the target time between blocks may \nhave to be increased to avoid wasting resources.  We want blocks to usually \npropagate in much less time than it takes to generate them, otherwise nodes \nwould spend too much time working on obsolete blocks.\n\nI'm planning to run an automated test with computers randomly sending payments \nto each other and randomly dropping packets.\n\n\n> 3. The bitcoin system turns out to be socially useful and valuable, so\n> that node operators feel that they are making a beneficial contribution\n> to the world by their efforts (similar to the various \"@Home\" compute\n> projects where people volunteer their compute resources for good causes).\n> \n> In this case it seems to me that simple altruism can suffice to keep the\n> network running properly.\n\nIt's very attractive to the libertarian viewpoint if we can explain it \nproperly.  I'm better with code than with words though.\n\nSatoshi Nakamoto\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-13T19:34:25-0800",
      "Text": "\n\nJames A. Donald wrote:\n> It is not sufficient that everyone knows X. We also\n> need everyone to know that everyone knows X, and that\n> everyone knows that everyone knows that everyone knows X\n> - which, as in the Byzantine Generals problem, is the\n> classic hard problem of distributed data processing.\n\nThe proof-of-work chain is a solution to the Byzantine Generals' Problem.  I'll \ntry to rephrase it in that context.\n\nA number of Byzantine Generals each have a computer and want to attack the \nKing's wi-fi by brute forcing the password, which they've learned is a certain \nnumber of characters in length.  Once they stimulate the network to generate a \npacket, they must crack the password within a limited time to break in and \nerase the logs, otherwise they will be discovered and get in trouble.  They \nonly have enough CPU power to crack it fast enough if a majority of them attack \nat the same time.\n\nThey don't particularly care when the attack will be, just that they all agree. \n It has been decided that anyone who feels like it will announce a time, and \nwhatever time is heard first will be the official attack time.  The problem is \nthat the network is not instantaneous, and if two generals announce different \nattack times at close to the same time, some may hear one first and others hear \nthe other first.\n\nThey use a proof-of-work chain to solve the problem.  Once each general \nreceives whatever attack time he hears first, he sets his computer to solve an \nextremely difficult proof-of-work problem that includes the attack time in its \nhash.  The proof-of-work is so difficult, it's expected to take 10 minutes of \nthem all working at once before one of them finds a solution.  Once one of the \ngenerals finds a proof-of-work, he broadcasts it to the network, and everyone \nchanges their current proof-of-work computation to include that proof-of-work \nin the hash they're working on.  If anyone was working on a different attack \ntime, they switch to this one, because its proof-of-work chain is now longer.\n\nAfter two hours, one attack time should be hashed by a chain of 12 \nproofs-of-work.  Every general, just by verifying the difficulty of the \nproof-of-work chain, can estimate how much parallel CPU power per hour was \nexpended on it and see that it must have required the majority of the computers \nto produce that much proof-of-work in the allotted time.  They had to all have \nseen it because the proof-of-work is proof that they worked on it.  If the CPU \npower exhibited by the proof-of-work chain is sufficient to crack the password, \nthey can safely attack at the agreed time.\n\nThe proof-of-work chain is how all the synchronisation, distributed database \nand global view problems you've asked about are solved.\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-11T06:30:22-0800",
      "Text": "\n\nJames A. Donald wrote:\n> So what happened to the coin that lost the race?\n>\n> ... it is a bit harsh if the guy who came second \n> is likely to lose his coin.\n\nWhen there are multiple double-spent versions of the same transaction, one and \nonly one will become valid.\n\nThe receiver of a payment must wait an hour or so before believing that it's \nvalid.  The network will resolve any possible double-spend races by then.\n\nThe guy who received the double-spend that became invalid never thought he had \nit in the first place.  His software would have shown the transaction go from \n\"unconfirmed\" to \"invalid\".  If necessary, the UI can be made to hide \ntransactions until they're sufficiently deep in the block chain.\n\n\n> Further, your description of events implies restrictions\n> on timing and coin generation - that the entire network\n> generates coins slowly compared to the time required for\n> news of a new coin to flood the network\n\nSorry if I didn't make that clear.  The target time between blocks will \nprobably be 10 minutes.\n\nEvery block includes its creation time.  If the time is off by more than 36 \nhours, other nodes won't work on it.  If the timespan over the last 6*24*30 \nblocks is less than 15 days, blocks are being generated too fast and the \nproof-of-work difficulty doubles.  Everyone does the same calculation with the \nsame chain data, so they all get the same result at the same link in the chain.\n\n\n> We want spenders to have certainty that their\n> transaction is valid at the time it takes a spend to\n> flood the network, not at the time it takes for branch\n> races to be resolved.\n\nInstantant non-repudiability is not a feature, but it's still much faster than \nexisting systems.  Paper cheques can bounce up to a week or two later.  Credit \ncard transactions can be contested up to 60 to 180 days later.  Bitcoin \ntransactions can be sufficiently irreversible in an hour or two.\n\n\n> If one node is ignoring all spends that it does not \n> care about, it suffers no adverse consequences.\n\nWith the transaction fee based incentive system I recently posted, nodes would \nhave an incentive to include all the paying transactions they receive.\n\nSatoshi Nakamoto\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-10T11:09:26-0800",
      "Text": "\n\nJames A. Donald wrote:\n> Furthermore, it cannot be made to work, as in the\n> proposed system the work of tracking who owns what coins\n> is paid for by seigniorage, which requires inflation.\n\nIf you're having trouble with the inflation issue, it's easy to tweak it for \ntransaction fees instead.  It's as simple as this: let the output value from \nany transaction be 1 cent less than the input value.  Either the client \nsoftware automatically writes transactions for 1 cent more than the intended \npayment value, or it could come out of the payee's side.  The incentive value \nwhen a node finds a proof-of-work for a block could be the total of the fees in \nthe block.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-09T11:14:17-0800",
      "Text": "\n\nJames A. Donald wrote:\n> The core concept is that lots of entities keep complete and consistent\n> information as to who owns which bitcoins.\n>\n> But maintaining consistency is tricky. It is not clear to me what\n> happens when someone reports one transaction to one maintainer, and\n> someone else transports another transaction to another maintainer. The\n> transaction cannot be known to be valid until it has been incorporated\n> into a globally shared view of all past transactions, and no one can\n> know that a globally shared view of all past transactions is globally\n> shared until after some time has passed, and after many new\n> transactions have arrived.\n>\n> Did you explain how to do this, and it just passed over my head, or\n> were you confident it could be done, and a bit vague as to the details?\n\nThe proof-of-work chain is the solution to the synchronisation problem, and to \nknowing what the globally shared view is without having to trust anyone.\n\nA transaction will quickly propagate throughout the network, so if two versions \nof the same transaction were reported at close to the same time, the one with \nthe head start would have a big advantage in reaching many more nodes first.  \nNodes will only accept the first one they see, refusing the second one to \narrive, so the earlier transaction would have many more nodes working on \nincorporating it into the next proof-of-work.  In effect, each node votes for \nits viewpoint of which transaction it saw first by including it in its \nproof-of-work effort.\n\nIf the transactions did come at exactly the same time and there was an even \nsplit, it's a toss up based on which gets into a proof-of-work first, and that \ndecides which is valid.\n\nWhen a node finds a proof-of-work, the new block is propagated throughout the \nnetwork and everyone adds it to the chain and starts working on the next block \nafter it.  Any nodes that had the other transaction will stop trying to include \nit in a block, since it's now invalid according to the accepted chain.\n\nThe proof-of-work chain is itself self-evident proof that it came from the \nglobally shared view.  Only the majority of the network together has enough CPU \npower to generate such a difficult chain of proof-of-work.  Any user, upon \nreceiving the proof-of-work chain, can see what the majority of the network has \napproved.  Once a transaction is hashed into a link that's a few links back in \nthe chain, it is firmly etched into the global history.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-09T11:17:24-0800",
      "Text": "\n\nJames A. Donald wrote:\n>OK, suppose one node incorporates a bunch of\n>transactions in its proof of work, all of them honest\n>legitimate single spends and another node incorporates a\n>different bunch of transactions in its proof of\n>work, all of them equally honest legitimate single\n>spends, and both proofs are generated at about the same\n>time.\n>\n>What happens then?\n\nThey both broadcast their blocks.  All nodes receive them and keep both, but \nonly work on the one they received first.  We'll suppose exactly half received \none first, half the other.  \n\nIn a short time, all the transactions will finish propagating so that everyone \nhas the full set.  The nodes working on each side will be trying to add the \ntransactions that are missing from their side.  When the next proof-of-work is \nfound, whichever previous block that node was working on, that branch becomes \nlonger and the tie is broken.  Whichever side it is, the new block will contain \nthe other half of the transactions, so in either case, the branch will contain \nall transactions.  Even in the unlikely event that a split happened twice in a \nrow, both sides of the second split would contain the full set of transactions \nanyway.\n\nIt's not a problem if transactions have to wait one or a few extra cycles to \nget into a block. \n\nSatoshi Nakamoto\n\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-09T11:13:34-0800",
      "Text": "\n\nHal Finney wrote:\n> it is mentioned that if a broadcast transaction does not reach all nodes,\n> it is OK, as it will get into the block chain before long. How does this\n> happen - what if the node that creates the \"next\" block (the first node\n> to find the hashcash collision) did not hear about the transaction,\n> and then a few more blocks get added also by nodes that did not hear\n> about that transaction? Do all the nodes that did hear it keep that\n> transaction around, hoping to incorporate it into a block once they get\n> lucky enough to be the one which finds the next collision?\n\nRight, nodes keep transactions in their working set until they get into a \nblock.  If a transaction reaches 90% of nodes, then each time a new block is \nfound, it has a 90% chance of being in it.\n\n\n> Or for example, what if a node is keeping two or more chains around as\n> it waits to see which grows fastest, and a block comes in for chain A\n> which would include a double-spend of a coin that is in chain B? Is that\n> checked for or not? (This might happen if someone double-spent and two\n> different sets of nodes heard about the two different transactions with\n> the same coin.)\n\nThat does not need to be checked for.  The transaction in whichever branch ends \nup getting ahead becomes the valid one, the other is invalid.  If someone tries \nto double spend like that, one and only one spend will always become valid, the \nothers invalid.\n\nReceivers of transactions will normally need to hold transactions for perhaps \nan hour or more to allow time for this kind of possibility to be resolved.  \nThey can still re-spend the coins immediately, but they should wait before \ntaking an action such as shipping goods.  \n\n\n> I also don't understand exactly how double-spending, or cancelling\n> transactions, is accomplished by a superior attacker who is able to muster\n> more computing power than all the honest participants. I see that he can\n> create new blocks and add them to create the longest chain, but how can\n> he erase or add old transactions in the chain? As the attacker sends out\n> his new blocks, aren't there consistency checks which honest nodes can\n> perform, to make sure that nothing got erased? More explanation of this\n> attack would be helpful, in order to judge the gains to an attacker from\n> this, versus simply using his computing power to mint new coins honestly.\n\nThe attacker isn't adding blocks to the end.  He has to go back and redo the \nblock his transaction is in and all the blocks after it, as well as any new \nblocks the network keeps adding to the end while he's doing that.  He's \nrewriting history.  Once his branch is longer, it becomes the new valid one.\n\nThis touches on a key point.  Even though everyone present may see the \nshenanigans going on, there's no way to take advantage of that fact. \n\nIt is strictly necessary that the longest chain is always considered the valid \none.  Nodes that were present may remember that one branch was there first and \ngot replaced by another, but there would be no way for them to convince those \nwho were not present of this.  We can't have subfactions of nodes that cling to \none branch that they think was first, others that saw another branch first, and \nothers that joined later and never saw what happened.  The CPU power \nproof-of-work vote must have the final say.  The only way for everyone to stay \non the same page is to believe that the longest chain is always the valid one, \nno matter what.\n\n\n> As far as the spending transactions, what checks does the recipient of a\n> coin have to perform? Does she need to go back through the coin's entire\n> history of transfers, and make sure that every transaction on the list is\n> indeed linked into the \"timestamp\" block chain? Or can she just do the\n> latest one? \n\nThe recipient just needs to verify it back to a depth that is sufficiently far \nback in the block chain, which will often only require a depth of 2 \ntransactions.  All transactions before that can be discarded.\n\n\n> Do the timestamp nodes check transactions, making sure that\n> the previous transaction on a coin is in the chain, thereby enforcing\n> the rule that all transactions in the chain represent valid coins?\n\nRight, exactly.  When a node receives a block, it checks the signatures of \nevery transaction in it against previous transactions in blocks.  Blocks can \nonly contain transactions that depend on valid transactions in previous blocks \nor the same block.  Transaction C could depend on transaction B in the same \nblock and B depends on transaction A in an earlier block.\n\n\n> Sorry about all the questions, but as I said this does seem to be a\n> very promising and original idea, and I am looking forward to seeing\n> how the concept is further developed. It would be helpful to see a more\n> process oriented description of the idea, with concrete details of the\n> data structures for the various objects (coins, blocks, transactions),\n> the data which is included in messages, and algorithmic descriptions\n> of the procedures for handling the various events which would occur in\n> this system. You mentioned that you are working on an implementation,\n> but I think a more formal, text description of the system would be a\n> helpful next step.\n\nI appreciate your questions.  I actually did this kind of backwards.  I had to \nwrite all the code before I could convince myself that I could solve every \nproblem, then I wrote the paper.  I think I will be able to release the code \nsooner than I could write a detailed spec.  You're already right about most of \nyour assumptions where you filled in the blanks.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-08T13:38:26-0800",
      "Text": "\n\nRay Dillinger:\n> the \"currency\" is inflationary at about 35% \n> as that's how much faster computers get annually\n> ... the inflation rate of 35% is almost guaranteed \n> by the technology\n\nIncreasing hardware speed is handled: \"To compensate for increasing hardware \nspeed and varying interest in running nodes over time, the proof-of-work \ndifficulty is determined by a moving average targeting an average number of \nblocks per hour. If they're generated too fast, the difficulty increases.\"\n\nAs computers get faster and the total computing power applied to creating \nbitcoins increases, the difficulty increases proportionally to keep the total \nnew production constant.  Thus, it is known in advance how many new bitcoins \nwill be created every year in the future.\n\nThe fact that new coins are produced means the money supply increases by a \nplanned amount, but this does not necessarily result in inflation.  If the \nsupply of money increases at the same rate that the number of people using it \nincreases, prices remain stable.  If it does not increase as fast as demand, \nthere will be deflation and early holders of money will see its value increase.\n\nCoins have to get initially distributed somehow, and a constant rate seems like \nthe best formula.\n\nSatoshi Nakamoto\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-07T09:30:36-0800",
      "Text": "\n\n>[Lengthy exposition of vulnerability of a systm to use-of-force\n>monopolies ellided.]\n>\n>You will not find a solution to political problems in cryptography.\n\nYes, but we can win a major battle in the arms race and gain a new territory of \nfreedom for several years.\n\nGovernments are good at cutting off the heads of a centrally controlled \nnetworks like Napster, but pure P2P networks like Gnutella and Tor seem to be \nholding their own.  \n\nSatoshi\n\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-03T11:45:58-0800",
      "Text": "\n\n>> As long as honest nodes control the most CPU power on the network,\n>> they can generate the longest chain and outpace any attackers.\n>\n>But they don't.  Bad guys routinely control zombie farms of 100,000\n>machines or more.  People I know who run a blacklist of spam sending\n>zombies tell me they often see a million new zombies a day.\n>\n>This is the same reason that hashcash can't work on today's Internet\n>-- the good guys have vastly less computational firepower than the bad\n>guys.\n\nThanks for bringing up that point.\n\nI didn't really make that statement as strong as I could have.  The requirement \nis that the good guys collectively have more CPU power than any single \nattacker. \n\nThere would be many smaller zombie farms that are not big enough to overpower \nthe network, and they could still make money by generating bitcoins.  The \nsmaller farms are then the \"honest nodes\".  (I need a better term than \n\"honest\")  The more smaller farms resort to generating bitcoins, the higher the \nbar gets to overpower the network, making larger farms also too small to \noverpower it so that they may as well generate bitcoins too.  According to the \n\"long tail\" theory, the small, medium and merely large farms put together \nshould add up to a lot more than the biggest zombie farm.\n\nEven if a bad guy does overpower the network, it's not like he's instantly \nrich.  All he can accomplish is to take back money he himself spent, like \nbouncing a check.  To exploit it, he would have to buy something from a \nmerchant, wait till it ships, then overpower the network and try to take his \nmoney back.  I don't think he could make as much money trying to pull a carding \nscheme like that as he could by generating bitcoins.  With a zombie farm that \nbig, he could generate more bitcoins than everyone else combined.\n\nThe Bitcoin network might actually reduce spam by diverting zombie farms to \ngenerating bitcoins instead.\n\nSatoshi Nakamoto\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Re: Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-02T17:56:27-0800",
      "Text": "\n\n>Satoshi Nakamoto wrote:\n>> I've been working on a new electronic cash system that's fully\n>> peer-to-peer, with no trusted third party.\n>> \n>> The paper is available at:\n>> http:\/\/www.bitcoin.org\/bitcoin.pdf\n>\n>We very, very much need such a system, but the way I understand your \n>proposal, it does not seem to scale to the required size.\n>\n>For transferable proof of work tokens to have value, they must have \n>monetary value.  To have monetary value, they must be transferred within \n>a very large network - for example a file trading network akin to \n>bittorrent.\n>\n>To detect and reject a double spending event in a timely manner, one \n>must have most past transactions of the coins in the transaction, which, \n>  naively implemented, requires each peer to have most past \n>transactions, or most past transactions that occurred recently. If \n>hundreds of millions of people are doing transactions, that is a lot of \n>bandwidth - each must know all, or a substantial part thereof.\n>\n\n\nLong before the network gets anywhere near as large as that, it would be safe \nfor users to use Simplified Payment Verification (section 8) to check for \ndouble spending, which only requires having the chain of block headers, or \nabout 12KB per day.  Only people trying to create new coins would need to run \nnetwork nodes.  At first, most users would run network nodes, but as the \nnetwork grows beyond a certain point, it would be left more and more to \nspecialists with server farms of specialized hardware.  A server farm would \nonly need to have one node on the network and the rest of the LAN connects with \nthat one node.\n\nThe bandwidth might not be as prohibitive as you think.  A typical transaction \nwould be about 400 bytes (ECC is nicely compact).  Each transaction has to be \nbroadcast twice, so lets say 1KB per transaction.  Visa processed 37 billion \ntransactions in FY2008, or an average of 100 million transactions per day.  \nThat many transactions would take 100GB of bandwidth, or the size of 12 DVD or \n2 HD quality movies, or about $18 worth of bandwidth at current prices.\n\nIf the network were to get that big, it would take several years, and by then, \nsending 2 HD movies over the Internet would probably not seem like a big deal. \n\nSatoshi Nakamoto\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    },
    {
      "Subject": "Bitcoin P2P e-cash paper",
      "From": "Satoshi Nakamoto",
      "Date": "2008-11-01T16:16:33-0700",
      "Text": "\n\nI've been working on a new electronic cash system that's fully\npeer-to-peer, with no trusted third party.\n\nThe paper is available at:\nhttp:\/\/www.bitcoin.org\/bitcoin.pdf\n\nThe main properties:\n Double-spending is prevented with a peer-to-peer network.\n No mint or other trusted parties.\n Participants can be anonymous.\n New coins are made from Hashcash style proof-of-work.\n The proof-of-work for new coin generation also powers the\n    network to prevent double-spending.\n\nBitcoin: A Peer-to-Peer Electronic Cash System\n\nAbstract.  A purely peer-to-peer version of electronic cash would\nallow online payments to be sent directly from one party to another\nwithout the burdens of going through a financial institution.\nDigital signatures provide part of the solution, but the main\nbenefits are lost if a trusted party is still required to prevent\ndouble-spending.  We propose a solution to the double-spending\nproblem using a peer-to-peer network.  The network timestamps\ntransactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without\nredoing the proof-of-work.  The longest chain not only serves as\nproof of the sequence of events witnessed, but proof that it came\nfrom the largest pool of CPU power.  As long as honest nodes control\nthe most CPU power on the network, they can generate the longest\nchain and outpace any attackers.  The network itself requires\nminimal structure.  Messages are broadcasted on a best effort basis,\nand nodes can leave and rejoin the network at will, accepting the\nlongest proof-of-work chain as proof of what happened while they\nwere gone.\n\nFull paper at:\nhttp:\/\/www.bitcoin.org\/bitcoin.pdf\n\nSatoshi Nakamoto\n\n---------------------------------------------------------------------\nThe Cryptography Mailing List\nUnsubscribe by sending \"unsubscribe cryptography\" to [EMAIL PROTECTED]\n\n\n",
      "Source": "cryptography"
    }
  ]
}